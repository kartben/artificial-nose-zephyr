/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 15.10.2023 12:12:08

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1504;
#else
constexpr int kTensorArenaSize = 480;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,28 } };
const ALIGN(8) float tensor_data1[2] = { 0.17986354231834412, -0.17986352741718292, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) float tensor_data2[6] = { -0.0046631647273898125, 0.33599585294723511, 0.56360048055648804, -0.30605852603912354, -0.10857027769088745, 0.060172226279973984, };
const TfArray<1, int> tensor_dimension2 = { 1, { 6 } };
const ALIGN(16) float tensor_data3[12] = { 0.056604202836751938, 0.10703713446855545, 0.16393296420574188, 0.20213650166988373, 0.1962544322013855, 0.30494791269302368, -0.033220257610082626, -0.066273890435695648, 0.16714222729206085, 0.10208582878112793, 0.32415798306465149, 0.14588913321495056, };
const TfArray<1, int> tensor_dimension3 = { 1, { 12 } };
const ALIGN(16) float tensor_data4[12*28] = { 
  -0.34040483832359314, 0.088010326027870178, 0.15827876329421997, 0.27145859599113464, 0.040254604071378708, -0.1292051374912262, -0.059185530990362167, 0.73825806379318237, 0.59573131799697876, 0.79146945476531982, 0.29167771339416504, 0.24720285832881927, -0.1024913415312767, -0.050833854824304581, 1.9970183372497559, 1.9140578508377075, 2.1724483966827393, 1.9625483751296997, 0.87870806455612183, 0.33480441570281982, 0.016159897670149803, 0.40051937103271484, 0.40637302398681641, 0.34584143757820129, 0.2968917191028595, 1.8292018175125122, -0.45533683896064758, -0.073845602571964264, 
  0.033920571208000183, 0.023951759561896324, -0.23632006347179413, 0.0021852755453437567, -0.19121824204921722, -0.16210626065731049, 0.024529743939638138, 0.85171931982040405, 1.1914175748825073, 0.84038400650024414, 1.103161096572876, 0.45356172323226929, 0.078671567142009735, 0.16432270407676697, 2.2561383247375488, 2.333829402923584, 2.3326396942138672, 1.8741967678070068, 1.0400211811065674, -0.043681256473064423, 0.027494851499795914, 1.018768310546875, 0.6302371621131897, 0.71494656801223755, 0.86489009857177734, 0.3219185471534729, -0.033193834125995636, -0.17108991742134094, 
  0.040157746523618698, -0.18355496227741241, 0.38826295733451843, -0.038006097078323364, -0.30635082721710205, 0.0094958646222949028, 0.020202631130814552, 0.36520534753799438, 0.73712486028671265, 0.38390174508094788, 0.14740151166915894, 0.44911977648735046, -0.11357849091291428, -0.333425372838974, 1.2999861240386963, 1.2918218374252319, 1.0971771478652954, 0.9284663200378418, 0.45198586583137512, 0.14107333123683929, -0.12204178422689438, 0.19205562770366669, 0.073892965912818909, 0.48003241419792175, 0.46799921989440918, 1.1405249834060669, -0.26151823997497559, 0.0054958639666438103, 
  -0.082213878631591797, 0.055892620235681534, 0.66493397951126099, 0.46661466360092163, 0.29694977402687073, 0.097490772604942322, 0.055784448981285095, -0.71153318881988525, -0.31946238875389099, -0.011902055703103542, -0.66201180219650269, -0.12672971189022064, -0.3787994384765625, -0.38630881905555725, -1.5420140027999878, -1.5334098339080811, -1.5028610229492188, -1.5942856073379517, -0.73985773324966431, 0.26567453145980835, -0.037883110344409943, -0.84665912389755249, -0.66234874725341797, -0.81321066617965698, -0.93020719289779663, -1.4486204385757446, -0.34365606307983398, 0.16322560608386993, 
  0.24451740086078644, -0.046930577605962753, 0.3968474268913269, 0.010435414500534534, 0.41531074047088623, 0.0079792458564043045, 0.0473288893699646, -0.57271456718444824, -0.7879563570022583, -0.92084765434265137, -1.1019092798233032, 0.045309364795684814, -0.077309489250183105, -0.12890301644802094, -2.1375391483306885, -1.9892288446426392, -1.9430361986160278, -2.4600377082824707, -0.75912731885910034, -0.23668123781681061, -0.052931450307369232, -1.1668905019760132, -0.87077569961547852, -0.80060732364654541, -0.62002021074295044, -1.7118309736251831, 0.32116115093231201, 0.17635622620582581, 
  0.36835762858390808, 0.0064010368660092354, 0.24923251569271088, 0.18056167662143707, -0.0026354179717600346, -0.22401897609233856, -0.32460907101631165, 0.34013661742210388, 1.0271749496459961, 0.5791778564453125, 0.76605147123336792, 0.44665718078613281, -0.082315057516098022, -0.26822260022163391, 1.7857271432876587, 1.3608765602111816, 1.6861861944198608, 1.6801464557647705, 0.8190653920173645, 0.21004566550254822, 0.14069409668445587, 0.92529988288879395, 0.65661638975143433, 0.63916981220245361, 0.8672071099281311, 1.7277678251266479, -0.2278408408164978, 0.052831854671239853, 
  -0.29139026999473572, -0.26394945383071899, -0.3221038281917572, -0.30664891004562378, 0.60578405857086182, -0.81855767965316772, 0.28706035017967224, 0.099795989692211151, -0.18188807368278503, -0.38995519280433655, -0.14789892733097076, -0.032836426049470901, -0.18937374651432037, -0.030452124774456024, -0.5462566614151001, -0.38740181922912598, -0.67822641134262085, -0.55330747365951538, -0.2395097017288208, -0.20332631468772888, -0.28868430852890015, 0.014250523410737514, 0.054196279495954514, -0.052298925817012787, -0.23110282421112061, 0.1635318249464035, 0.57072341442108154, -0.039327874779701233, 
  -0.096679113805294037, -0.079570785164833069, 0.23977640271186829, -0.2735888659954071, -0.043323308229446411, 0.1609468013048172, 0.12121260911226273, 0.69637912511825562, 0.77228057384490967, 0.97749370336532593, 0.71120613813400269, -0.01836756244301796, 0.13086633384227753, -0.06516440212726593, 1.7662973403930664, 1.5388288497924805, 2.1474864482879639, 1.7346339225769043, 0.19548647105693817, 0.098862968385219574, -0.029460553079843521, 1.0520858764648438, 0.36489632725715637, 1.1435403823852539, 1.4699928760528564, 1.8470648527145386, 0.018790747970342636, 0.17905206978321075, 
  0.19184356927871704, -0.19095297157764435, 0.33407852053642273, -0.15611150860786438, 0.15066872537136078, -0.11274543404579163, -0.0057632005773484707, 1.1769708395004272, 1.2189222574234009, 0.87990409135818481, 0.75832456350326538, 0.01655009388923645, 0.014524111524224281, -0.046231169253587723, 1.8654055595397949, 1.6270924806594849, 2.2427306175231934, 1.8832107782363892, 1.0162858963012695, -0.27384665608406067, -0.072810210287570953, 1.1517144441604614, 0.94313210248947144, 0.50514966249465942, 0.57439005374908447, 1.5264384746551514, 0.12739495933055878, 0.12889069318771362, 
  0.046386770904064178, 0.15203870832920074, 0.15718664228916168, -0.0070791025646030903, -0.47973212599754333, -0.0027595760766416788, 0.031871605664491653, 0.85943454504013062, 0.94896936416625977, 0.64637762308120728, 0.77864444255828857, 0.51710700988769531, -0.0010523798409849405, 0.04375946894288063, 1.7029227018356323, 1.8709814548492432, 2.1099386215209961, 2.2924814224243164, 0.74547719955444336, 0.094673916697502136, 0.013643171638250351, 0.60550332069396973, 0.58820611238479614, 1.2222610712051392, 0.87481874227523804, 1.5231603384017944, -0.13830503821372986, 0.031521949917078018, 
  0.12915807962417603, 0.05916159600019455, 0.055384591221809387, 0.38780114054679871, 0.74525183439254761, -0.36624422669410706, -0.058692727237939835, -0.41109380125999451, -0.49191686511039734, -0.42779457569122314, -0.46784073114395142, 0.21418008208274841, 0.5949518084526062, 0.072857014834880829, -2.2364227771759033, -1.9011508226394653, -2.2373499870300293, -2.4539210796356201, -0.68126058578491211, -0.18297559022903442, 0.0077313180081546307, -1.064091682434082, -0.88715243339538574, -0.65686100721359253, -1.1543351411819458, -1.2351423501968384, -0.39252695441246033, -0.019001493230462074, 
  0.70235133171081543, 0.28044301271438599, 0.75189882516860962, 0.12562058866024017, 0.66898608207702637, 0.12688171863555908, -0.098205767571926117, -0.60165107250213623, -0.15922848880290985, -0.51055216789245605, -0.40925887227058411, 0.1415819376707077, -0.26970973610877991, 0.17507213354110718, -1.8778537511825562, -1.8863054513931274, -2.18753981590271, -2.4402406215667725, -0.83227634429931641, 0.28993129730224609, 0.055207852274179459, -0.61222481727600098, -0.76259922981262207, -0.99526357650756836, -0.46938404440879822, -0.96067535877227783, 0.029761428013443947, -0.10714346170425415, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 12,28 } };
const ALIGN(16) float tensor_data5[6*12] = { 
  -0.11478164047002792, 0.77868634462356567, 0.49140220880508423, 0.24836814403533936, -0.66834628582000732, 0.17535470426082611, -0.091861128807067871, 0.52630710601806641, 0.83573824167251587, 0.92007726430892944, -0.323224276304245, -0.31647190451622009, 
  -0.36116385459899902, -0.68191307783126831, -0.030648758634924889, 0.44789162278175354, 0.33832785487174988, 0.26144754886627197, 0.43305176496505737, -0.31968969106674194, -0.69689035415649414, -0.22164756059646606, 0.81328409910202026, 0.3936229944229126, 
  -0.3979572057723999, -0.62372297048568726, 0.21671240031719208, 0.61037987470626831, 0.95730465650558472, -0.15830120444297791, 1.2044315338134766, -0.6387256383895874, -0.50715696811676025, -0.43552577495574951, 0.94945400953292847, 0.88644009828567505, 
  -0.33797541260719299, -0.26728269457817078, 0.38999536633491516, -0.32207819819450378, -0.62188148498535156, -0.64766693115234375, 0.26541215181350708, -0.53743737936019897, -0.067715689539909363, 0.01142541691660881, -0.075450412929058075, 0.31039342284202576, 
  0.0067031779326498508, -0.10626212507486343, -0.23810969293117523, -0.025696394965052605, -0.1461617648601532, -0.44803515076637268, 0.31647536158561707, 0.24231794476509094, -0.075907222926616669, -0.068597428500652313, -0.30247971415519714, 0.034309297800064087, 
  0.55105537176132202, 0.77538859844207764, 0.53301352262496948, -0.50919294357299805, -0.23745431005954742, 0.18012432754039764, -0.39291328191757202, 0.092057704925537109, 0.60894578695297241, 0.82948344945907593, -0.26995554566383362, -0.46491524577140808, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 6,12 } };
const ALIGN(16) float tensor_data6[2*6] = { 
  -0.6281735897064209, -0.2621006965637207, 0.9840080738067627, -0.85059714317321777, 0.13283403217792511, -1.3271750211715698, 
  0.873241126537323, -1.3645685911178589, -1.1399370431900024, 0.79592669010162354, 0.61343413591384888, 1.2131152153015137, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 2,6 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,12 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,6 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,2 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,2 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,3 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 112, },
  { kTfLiteMmapRo, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, },
  { kTfLiteMmapRo, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 24, },
  { kTfLiteMmapRo, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 48, },
  { kTfLiteMmapRo, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 1344, },
  { kTfLiteMmapRo, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 288, },
  { kTfLiteMmapRo, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 48, },
  { kTfLiteArenaRw, tensor_arena + 112, (TfLiteIntArray*)&tensor_dimension7, 48, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 24, },
  { kTfLiteArenaRw, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension9, 8, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 8, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = kTfLiteFloat32;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = kTfLiteFloat32;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_143_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_143_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteStatus tflite_learn_143_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_143_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_143_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
